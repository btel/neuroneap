#!/usr/bin/env python
#coding=utf-8
"""Spatial distribution of the high-frequency components ($>$ {cutoff}~Hz)
of field potential due to an action
potential. The electric field potential generated by the flow of
membrane currents generated in a simulated layer 5 pyramidal neuron
(red shape) was calculated in various positions around the neuron. The
resulting potential for consecutive time frames is show as contour
plot (logarithmic scale, negative potential is plotted with dashed
lines).  In order to relate the potential distribution to the phase of
an action potential, timestamp of each frame is marked on a
sample waveshape of extracellular action potential (vertical line in
the inset). """
import numpy as np
import matplotlib.pyplot as plt
from eap import field, cell, graph
from matplotlib import transforms

dt = 0.025
tstop=35
win = [25, 33]
# Parameters
rho    = 3.5  #conductivity, Ohm.m
cutoff = 800. #high-pass cutoff, Hz
order  = 51  #filter order
Nsamp  = 20
filter = None

# Simulation
cell.load_model('models/Mainen/demo_ext.hoc',
                    'models/Mainen/i686/.libs/libnrnmech.so')
cell.initialize(dt=dt)
t, I = cell.integrate(tstop)

tmin, tmax = win
I = I[(t>tmin) & (t<tmax), :]
t = t[(t>tmin) & (t<tmax)]

# Calculation of field
xrange = [-3000, 3000]
yrange = [-3000, 3000]
coords = cell.get_seg_coords()
xx, yy = field.calc_grid(xrange, yrange, n_samp=Nsamp)
v_ext = field.estimate_on_grid(coords, I, xx, yy)

#Filter
filter = field.hp_fir(order, cutoff, dt)
if filter:
    for i in range(v_ext.shape[1]):
        for j in range(v_ext.shape[2]):
            v_ext[:, i, j] = filter(v_ext[:, i, j])


n_frames = 9
n_timepts = v_ext.shape[0]
shift = n_timepts/n_frames

fig = plt.figure()

c_amp = np.sign(v_ext)*np.log(np.abs(v_ext)+1)
levs = np.linspace(c_amp.min(), c_amp.max(), 10)
for i in range(n_frames):
    ampl = c_amp[i*shift, :, :]

    ## contour plot of the field
    ax = plt.subplot(3,3,i+1, frameon=False)
    plt.contour(xx, yy, ampl, colors='k', levels=levs)
    #graph.logcontour(xx, yy, np.abs(ampl))
    plt.xticks([])
    plt.yticks([])
    
    transAxesToFigure = (ax.transAxes+fig.transFigure.inverted())
    b = transforms.Bbox.from_bounds(0, 0.9, 0.3, 0.3)

    ax_inset = fig.add_axes(b.transformed(transAxesToFigure),
                            frameon=False)

    ax_inset.plot(t, v_ext[:, Nsamp/2., Nsamp/2.])
    ax_inset.axvline(t[i*shift], color='b')
    ax_inset.set_xticks([])
    ax_inset.set_yticks([])
    
    if i==0:
        ax_inset.set_xticks(win)
        ax_inset.xaxis.set_ticks_position('bottom')
        plt.sca(ax)
        graph.plot_neuron(coords, colors='r')

print __doc__.format(**vars())
plt.savefig('fig_field_timeframes.pdf')
