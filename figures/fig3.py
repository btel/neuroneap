#!/usr/bin/env python
#coding=utf-8
"""Spatial distribution of the field potential due to an action
potential. The electric field potential generated by the flow of
membrane currents generated in a simulated layer 5 pyramidal neuron
(blue shape) was calculated in various positions around the neuron.
The dependence of the peak-to-peak amplitude on the position is showed
as a contour plot (contour levels are given in nV) together with
sample potential waveforms at selected positions (black curves).
"""
import numpy as np
import matplotlib.pyplot as plt
from eap import field, cell, graph

dt = 0.025
tstop=50

# Parameters
rho    = 3.5  #conductivity, Ohm.m
cutoff = 800. #high-pass cutoff, Hz
order  = 401  #filter order
Nsamp  = 30
filter = None

#filter = field.hp_fir(order, cutoff, dt)

# Simulation
cell.load_model('models/Mainen/demo_ext.hoc',
                    'models/Mainen/i686/.libs/libnrnmech.so')
cell.initialize(dt=dt)
t, I = cell.integrate(tstop)

# Calculation of field
xrange = [-3000, 3000]
yrange = [-3000, 3000]
coords = cell.get_seg_coords()
xx, yy = field.calc_grid(xrange, yrange, n_samp=Nsamp)
v_ext = field.estimate_on_grid(coords, I, xx, yy)

if filter:
    for i in range(v_ext.shape[1]):
        for j in range(v_ext.shape[2]):
            v_ext[:, i, j] = filter(v_ext[:, i, j])
p2p = v_ext.max(0) - v_ext.min(0)

# PLOTS
fig = plt.figure()

## contour plot of the field
ax = plt.subplot(111, frameon=False)
graph.logcontour(xx, yy, p2p)

## plot neuron shape
graph.plot_neuron(coords, colors='b')

### convert axis labels to mm
xlocs, labs = plt.xticks()
plt.xticks(xlocs, (np.array(xlocs)/1000.).astype(int))
ylocs, labs = plt.yticks()
plt.yticks(ylocs, (np.array(ylocs)/1000.).astype(int))

plt.xlabel("position (mm)")
plt.ylabel("position (mm)")

## insets with extracellular potential shapes
spikes = [ (-2500, -2500), 
           (0,     -2500),
           (2500,  -2500),
           (-2500,     0),
           (2500,      0),
           (-2500,  2500),
           (0,      2500),
           (2500,   2500),
         ]

xx, yy = np.array(spikes).T
xx, yy = xx[:, np.newaxis], yy[:, np.newaxis]
v_samples = field.estimate_on_grid(coords, I, xx, yy)
axs = graph.plot_multiplies(xx, yy, v_samples, t)
plt.xlim([20, 40])

### add scalebars
plt.axes(axs[6])
plt.plot([35, 35], [-100, -300], 'k-')
plt.text(37, -200, '200 nV', ha='left', va='center', 
        transform=axs[6].transData)
plt.plot([35, 45], [100, 100], 'k-')
plt.text(40, 120, '20 ms', ha='center', va='bottom', 
        transform=axs[6].transData)

print __doc__
plt.savefig('fig3.pdf')
